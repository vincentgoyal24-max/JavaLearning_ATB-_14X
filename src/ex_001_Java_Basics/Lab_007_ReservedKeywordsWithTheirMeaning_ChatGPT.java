package ex_001_Java_Basics;

public class Lab_007_ReservedKeywordsWithTheirMeaning_ChatGPT {
  public static void main(String[] args) {
    /*
-Simple English words** which are having predefined meaning in **Java Programming Language.**
- Keywords are also called **Reserved Words.**
- All the keywords are defined in **Lower Case.  **
- We **canâ€™t use keywords** as names for variables, methods, classes, or as any other identifiers.
*/

    System.out.println(
      "1. **Data Types**\n" + "\n" + "Define the type of variables.\n" + "\n" + "* `byte` â†’ 8-bit integer.\n" +
      "* `short` â†’ 16-bit integer.\n" + "* `int` â†’ 32-bit integer.\n" + "* `long` â†’ 64-bit integer.\n" +
      "* `float` â†’ 32-bit floating-point number.\n" + "* `double` â†’ 64-bit floating-point number.\n" +
      "* `char` â†’ Single 16-bit Unicode character.\n" + "* `boolean` â†’ Represents `true` or `false`.\n" +
      "* `void` â†’ Represents no return type in a method.\n" + "\n" + "---\n" + "\n" +
      "## \uD83D\uDD39 2. **Control Flow Statements**\n" + "\n" + "Used for decision-making and looping.\n" + "\n" +
      "* `if` â†’ Executes a block if condition is true.\n" + "* `else` â†’ Executes a block if condition is false.\n" +
      "* `switch` â†’ Selects one block from multiple cases.\n" + "* `case` â†’ Defines each option in a switch.\n" +
      "* `default` â†’ Fallback in a switch if no case matches.\n" +
      "* `for` â†’ Loop with initialization, condition, update.\n" + "* `while` â†’ Loop until condition is true.\n" +
      "* `do` â†’ Loop executes once before checking condition.\n" + "* `break` â†’ Exits loop or switch immediately.\n" +
      "* `continue` â†’ Skips current iteration in a loop.\n" +
      "* `return` â†’ Exits from a method and optionally returns value.\n" +
      "* `yield` â†’ Returns value from a switch expression (Java 13+).\n" + "\n" + "---\n" + "\n" +
      "## \uD83D\uDD39 3. **Exception Handling**\n" + "\n" + "Used for error handling.\n" + "\n" +
      "* `try` â†’ Defines a block to test for exceptions.\n" + "* `catch` â†’ Handles exceptions from `try` block.\n" +
      "* `finally` â†’ Block that always executes after try/catch.\n" +
      "* `throw` â†’ Used to explicitly throw an exception.\n" +
      "* `throws` â†’ Declares exceptions a method may throw.\n" +
      "* `assert` â†’ Used for debugging, checks a condition.\n" + "\n" + "---\n" + "\n" +
      "## \uD83D\uDD39 4. **Object-Oriented Keywords**\n" + "\n" + "Define classes, inheritance, interfaces.\n" + "\n" +
      "* `class` â†’ Defines a class.\n" + "* `interface` â†’ Defines an interface.\n" +
      "* `enum` â†’ Defines an enum type.\n" + "* `extends` â†’ Inherits from a superclass.\n" +
      "* `implements` â†’ A class implements an interface.\n" + "* `new` â†’ Creates a new object.\n" +
      "* `this` â†’ Refers to the current object.\n" + "* `super` â†’ Refers to the parent class.\n" +
      "* `instanceof` â†’ Tests whether an object is of a specific type.\n" +
      "* `record` â†’ Defines an immutable data class (Java 14+).\n" + "\n" + "---\n" + "\n" +
      "## \uD83D\uDD39 5. **Access Modifiers**\n" + "\n" + "Define visibility of classes/methods/variables.\n" + "\n" +
      "* `public` â†’ Accessible everywhere.\n" + "* `private` â†’ Accessible only within the same class.\n" +
      "* `protected` â†’ Accessible within package and subclasses.\n" +
      "* `default` (no keyword, just package-private) â†’ Accessible only within the package.\n" + "\n" + "---\n" + "\n" +
      "## \uD83D\uDD39 6. **Non-Access Modifiers**\n" + "\n" +
      "Provide extra info about classes, methods, variables.\n" + "\n" +
      "* `static` â†’ Belongs to class, not instance.\n" +
      "* `final` â†’ Used to declare constants, prevent inheritance/overriding.\n" +
      "* `abstract` â†’ Defines abstract class or method.\n" +
      "* `synchronized` â†’ Ensures only one thread can access at a time.\n" +
      "* `volatile` â†’ Variable modified by multiple threads.\n" +
      "* `transient` â†’ Skips variable during serialization.\n" +
      "* `native` â†’ Declares method implemented in native (C/C++) code.\n" +
      "* `strictfp` â†’ Ensures floating-point consistency across platforms.\n" +
      "* `sealed` â†’ Restricts which classes can extend it (Java 15+).\n" +
      "* `non-sealed` â†’ Allows unrestricted extension of a sealed class.\n" +
      "* `permits` â†’ Declares which classes can extend a sealed class.\n" + "\n" + "---\n" + "\n" +
      "## \uD83D\uDD39 7. **Package & Imports**\n" + "\n" + "Used for organizing classes.\n" + "\n" +
      "* `package` â†’ Defines a namespace for classes.\n" + "* `import` â†’ Imports other classes/packages.\n" + "\n" +
      "---\n" + "\n" + "## \uD83D\uDD39 8. **Reserved (Not Used)**\n" + "\n" +
      "* `goto` â†’ Reserved but not implemented.\n" +
      "* `const` â†’ Reserved but not implemented (use `final` instead).\n" + "\n" + "---\n" + "\n" +
      "âœ… **Total â†’ 68 keywords** (including contextual ones like `record`, `yield`, `sealed`).\n");
  /*

## ðŸ”¹ 1. **Data Types**

Define the type of variables.

* `byte` â†’ 8-bit integer.
* `short` â†’ 16-bit integer.
* `int` â†’ 32-bit integer.
* `long` â†’ 64-bit integer.
* `float` â†’ 32-bit floating-point number.
* `double` â†’ 64-bit floating-point number.
* `char` â†’ Single 16-bit Unicode character.
* `boolean` â†’ Represents `true` or `false`.
* `void` â†’ Represents no return type in a method.

---

## ðŸ”¹ 2. **Control Flow Statements**

Used for decision-making and looping.

* `if` â†’ Executes a block if condition is true.
* `else` â†’ Executes a block if condition is false.
* `switch` â†’ Selects one block from multiple cases.
* `case` â†’ Defines each option in a switch.
* `default` â†’ Fallback in a switch if no case matches.
* `for` â†’ Loop with initialization, condition, update.
* `while` â†’ Loop until condition is true.
* `do` â†’ Loop executes once before checking condition.
* `break` â†’ Exits loop or switch immediately.
* `continue` â†’ Skips current iteration in a loop.
* `return` â†’ Exits from a method and optionally returns value.
* `yield` â†’ Returns value from a switch expression (Java 13+).

---

## ðŸ”¹ 3. **Exception Handling**

Used for error handling.

* `try` â†’ Defines a block to test for exceptions.
* `catch` â†’ Handles exceptions from `try` block.
* `finally` â†’ Block that always executes after try/catch.
* `throw` â†’ Used to explicitly throw an exception.
* `throws` â†’ Declares exceptions a method may throw.
* `assert` â†’ Used for debugging, checks a condition.

---

## ðŸ”¹ 4. **Object-Oriented Keywords**

Define classes, inheritance, interfaces.

* `class` â†’ Defines a class.
* `interface` â†’ Defines an interface.
* `enum` â†’ Defines an enum type.
* `extends` â†’ Inherits from a superclass.
* `implements` â†’ A class implements an interface.
* `new` â†’ Creates a new object.
* `this` â†’ Refers to the current object.
* `super` â†’ Refers to the parent class.
* `instanceof` â†’ Tests whether an object is of a specific type.
* `record` â†’ Defines an immutable data class (Java 14+).

---

## ðŸ”¹ 5. **Access Modifiers**

Define visibility of classes/methods/variables.

* `public` â†’ Accessible everywhere.
* `private` â†’ Accessible only within the same class.
* `protected` â†’ Accessible within package and subclasses.
* `default` (no keyword, just package-private) â†’ Accessible only within the package.

---

## ðŸ”¹ 6. **Non-Access Modifiers**

Provide extra info about classes, methods, variables.

* `static` â†’ Belongs to class, not instance.
* `final` â†’ Used to declare constants, prevent inheritance/overriding.
* `abstract` â†’ Defines abstract class or method.
* `synchronized` â†’ Ensures only one thread can access at a time.
* `volatile` â†’ Variable modified by multiple threads.
* `transient` â†’ Skips variable during serialization.
* `native` â†’ Declares method implemented in native (C/C++) code.
* `strictfp` â†’ Ensures floating-point consistency across platforms.
* `sealed` â†’ Restricts which classes can extend it (Java 15+).
* `non-sealed` â†’ Allows unrestricted extension of a sealed class.
* `permits` â†’ Declares which classes can extend a sealed class.

---

## ðŸ”¹ 7. **Package & Imports**

Used for organizing classes.

* `package` â†’ Defines a namespace for classes.
* `import` â†’ Imports other classes/packages.

---

## ðŸ”¹ 8. **Reserved (Not Used)**

* `goto` â†’ Reserved but not implemented.
* `const` â†’ Reserved but not implemented (use `final` instead).

---

âœ… **Total â†’ 68 keywords** (including contextual ones like `record`, `yield`, `sealed`).
  */

  }
}